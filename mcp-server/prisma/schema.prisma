// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum ExamType {
  UNIT_TEST
  MIDTERM
  FINAL
  ASSIGNMENT
  PROJECT
}

enum GradeScale {
  A_PLUS
  A
  B_PLUS
  B
  C_PLUS
  C
  D
  F
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile information
  profile UserProfile?

  // Role-specific relations
  student Student?
  teacher Teacher?
  parent  Parent?

  // Audit fields
  createdBy String?
  updatedBy String?

  @@map("users")
}

model UserProfile {
  id          String    @id @default(cuid())
  userId      String    @unique
  firstName   String
  lastName    String
  middleName  String?
  dateOfBirth DateTime?
  gender      String?
  phone       String?
  address     String?
  city        String?
  state       String?
  pincode     String?
  bloodGroup  String?
  photoUrl    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Student {
  id            String  @id @default(cuid())
  userId        String  @unique
  rollNumber    String  @unique
  admissionDate DateTime
  parentId      String?
  classId       String?

  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent Parent?  @relation(fields: [parentId], references: [id])
  class  Class?   @relation(fields: [classId], references: [id])

  // Academic records
  attendances Attendance[]
  examResults ExamResult[]
  grades      Grade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("students")
}

model Teacher {
  id           String   @id @default(cuid())
  userId       String   @unique
  employeeId   String   @unique
  joiningDate  DateTime
  qualification String?
  experience   Int?     // in years
  salary       Decimal?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Teaching assignments
  subjects      Subject[]
  classes       Class[]
  timetableSlots TimetableSlot[]
  attendanceRecords Attendance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teachers")
}

model Parent {
  id         String  @id @default(cuid())
  userId     String  @unique
  occupation String?
  income     Decimal?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Children
  students Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("parents")
}

model AcademicYear {
  id        String   @id @default(cuid())
  year      String   @unique // e.g., "2023-2024"
  startDate DateTime
  endDate   DateTime
  isCurrent Boolean  @default(false)

  terms   Term[]
  classes Class[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("academic_years")
}

model Term {
  id             String @id @default(cuid())
  name           String // e.g., "First Term", "Second Term"
  academicYearId String
  startDate      DateTime
  endDate        DateTime

  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])

  exams Exam[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("terms")
}

model Class {
  id             String @id @default(cuid())
  name           String // e.g., "Class 10"
  section        String // e.g., "A", "B"
  academicYearId String
  capacity       Int    @default(50)

  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])

  // Relations
  students       Student[]
  teachers       Teacher[]
  subjects       Subject[]
  timetableSlots TimetableSlot[]
  attendances    Attendance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, section, academicYearId])
  @@map("classes")
}

model Subject {
  id          String  @id @default(cuid())
  name        String
  code        String  @unique
  description String?
  credits     Int     @default(1)

  // Relations
  classes     Class[]
  teachers    Teacher[]
  exams       Exam[]
  examResults ExamResult[]
  grades      Grade[]
  timetableSlots TimetableSlot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subjects")
}

model Timetable {
  id      String @id @default(cuid())
  classId String
  name    String // e.g., "Weekly Timetable"

  slots TimetableSlot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("timetables")
}

model TimetableSlot {
  id          String @id @default(cuid())
  timetableId String
  classId     String
  subjectId   String
  teacherId   String
  dayOfWeek   Int    // 1 = Monday, 7 = Sunday
  startTime   String // HH:MM format
  endTime     String // HH:MM format
  period      Int    // Period number

  timetable Timetable @relation(fields: [timetableId], references: [id])
  class     Class     @relation(fields: [classId], references: [id])
  subject   Subject   @relation(fields: [subjectId], references: [id])
  teacher   Teacher   @relation(fields: [teacherId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([classId, dayOfWeek, period])
  @@map("timetable_slots")
}

model Attendance {
  id        String           @id @default(cuid())
  studentId String
  classId   String
  teacherId String
  date      DateTime         @db.Date
  status    AttendanceStatus
  remarks   String?

  student Student @relation(fields: [studentId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])
  teacher Teacher @relation(fields: [teacherId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, date])
  @@map("attendances")
}

model Exam {
  id          String   @id @default(cuid())
  name        String
  type        ExamType
  termId      String
  subjectId   String
  date        DateTime
  duration    Int      // in minutes
  totalMarks  Decimal
  passingMarks Decimal

  term    Term    @relation(fields: [termId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  examResults ExamResult[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("exams")
}

model ExamResult {
  id           String     @id @default(cuid())
  examId       String
  studentId    String
  subjectId    String
  marksObtained Decimal
  grade        GradeScale
  remarks      String?

  exam    Exam    @relation(fields: [examId], references: [id])
  student Student @relation(fields: [studentId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([examId, studentId])
  @@map("exam_results")
}

model Grade {
  id        String     @id @default(cuid())
  studentId String
  subjectId String
  termId    String?
  grade     GradeScale
  marks     Decimal?
  totalMarks Decimal?
  percentage Decimal?

  student Student @relation(fields: [studentId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("grades")
}

model Notice {
  id          String   @id @default(cuid())
  title       String
  content     String
  priority    String   @default("NORMAL") // HIGH, NORMAL, LOW
  targetRoles UserRole[]
  publishDate DateTime @default(now())
  expiryDate  DateTime?
  isActive    Boolean  @default(true)
  authorId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notices")
}

model SchoolSettings {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("STRING") // STRING, NUMBER, BOOLEAN, JSON

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("school_settings")
}